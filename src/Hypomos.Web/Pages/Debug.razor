@page "/debug"
@using System.Security.Claims
@using Hypomos.Interfaces.Models
@using Orleans;
@using Microsoft.Extensions.Configuration
@using Orleans.Streams
@inject IClusterClient clusterClient
@inject IConfiguration config;

@inject HypomosUser User
@attribute [Authorize]

<h1>Debugging stuff</h1>

<button class="btn btn-primary" @onclick="Scan">Scan</button>
<button class="btn btn-primary" @onclick="Organize">Organize</button>

<span>Currently processing: @processing</span>

@code {

    string processing = string.Empty;
    
    private async Task Scan()
    {
        var userGrain = clusterClient.GetGrain<IUserGrain>(User.Username);

        var isInitialized = await userGrain.IsInitialized();
        if (!isInitialized)
        {
            await userGrain.Initialize(new UserInitializationContext
            {
                Username = User.Username,
                EmailAddress = User.Email,
                Surname = User.Surname,
                GivenName = User.GivenName
            });
        }
    }

    private async Task Organize()
    {
        var configurationSection = config.GetSection("Storage:Configuration");
        var mcs = configurationSection.GetChildren().Select(bc =>
        {
            var mc = new MinioConfiguration();
            bc.Bind(mc);
            return mc;
        }).ToList();

        var streamProvider = clusterClient.GetStreamProvider(Constants.SmsProvider);

        foreach (var mc in mcs)
        {
            var providerKey = Guid.NewGuid();
            var grain = clusterClient.GetGrain<IMinioStorageProvider>(providerKey);
            await grain.SetConfiguration(mc);

            var scanEvents = streamProvider.GetStream<ScanEventData>(providerKey, User.Username);
            await scanEvents.SubscribeAsync(ProcessScanEvent);

            Console.WriteLine($"Bucket: {mc.BucketName} in grain: {grain.GetGrainIdentity()}");

            await grain.Scan(User.Username);
        }
    }

    private Task ProcessScanEvent(ScanEventData arg1, StreamSequenceToken arg2)
    {
        this.processing = arg1.ToString();

        return Task.CompletedTask;
    }
}
