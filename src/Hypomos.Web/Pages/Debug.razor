@page "/debug"
@using System.Security.Claims
@using Hypomos.Interfaces
@using global::Orleans
@using Hypomos.Interfaces.Models
@using Microsoft.Extensions.Configuration
@inject IClusterClient clusterClient
@inject IConfiguration config;
@inject AuthenticationStateProvider AuthenticationStateProvider

<h1>Debugging stuff</h1>

<button class="btn btn-primary" @onclick="Scan">Scan</button>
<button class="btn btn-primary" @onclick="Organize">Organize</button>

@code {

    async Task Scan()
    {
        var state = await AuthenticationStateProvider.GetAuthenticationStateAsync();
        var uniqueUsername = state.User.FindFirst(claim => claim.Type == ClaimTypes.Name);

        var userGrain = clusterClient.GetGrain<IUserGrain>(uniqueUsername.Value);

        var isInitialized = await userGrain.IsInitialized();
        if (!isInitialized)
        {
            var emailClaim = state.User.FindFirst(claim => claim.Type == ClaimTypes.Email);
            var surnameClaim = state.User.FindFirst(claim => claim.Type == ClaimTypes.Surname);
            var givenNameClaim = state.User.FindFirst(claim => claim.Type == ClaimTypes.GivenName);

            await userGrain.Initialize(new UserInitializationContext
            {
                Username = state.User.Identity.Name,
                EmailAddress = emailClaim.Value,
                Surname = surnameClaim.Value,
                GivenName = givenNameClaim.Value
            });
        }
    }

    async Task Organize()
    {
        var configurationSection = config.GetSection("Storage:Configuration");
        var mcs = configurationSection.GetChildren().Select(bc =>
        {
            var mc = new MinioConfiguration();
            bc.Bind(mc);
            return mc;
        }).ToList();

        foreach (var mc in mcs)
        {
            var grain = clusterClient.GetGrain<IMinioStorageProvider>(Guid.NewGuid());
            await grain.SetConfiguration(mc);

            Console.WriteLine($"Bucket: {mc.BucketName} in grain: {grain.GetGrainIdentity()}");

            await grain.Scan();
        }
    }
}
