@using Hypomos.Web.Pages.InitialSetup
@using Orleans;
@inject IClusterClient ClusterClient
@inject AuthenticationStateProvider AuthenticationStateProvider
@inject NavigationManager NavigationManager
@inject HypomosUserFactory UserFactory

@code
{
    public HypomosUser User { get; set; }
    public InitialSetupStateMachine InitialSetupStateMachine { get; set; }

    protected override async Task OnInitializedAsync()
    {
        this.User = await UserFactory.GetCurrentUserAsync();

        //var uri = new Uri(NavigationManager.Uri);
        if (User.IsLoggedIn)
        {
            this.InitialSetupStateMachine = new InitialSetupStateMachine(User, ClusterClient);
            await this.InitialSetupStateMachine.Init();

            //var alreadySettingUp = uri.LocalPath.Contains("InitialSetup");
            //var shouldNavigate = this.InitialSetupStateMachine.ShouldNavigate;

            //if (!alreadySettingUp && shouldNavigate && !uri.LocalPath.EndsWith(this.InitialSetupStateMachine.NavigationTarget))
            //{
            //    NavigationManager.NavigateTo(this.InitialSetupStateMachine.NavigationTarget);
            //}
        }
    }
}

<CascadingAuthenticationState>
    <CascadingValue Value="@User" Name="User">
        <CascadingValue Value="@InitialSetupStateMachine" Name="InitialSetupStateMachine">
            <Router AppAssembly="@typeof(Program).Assembly">
                <Found Context="routeData">
                    <AuthorizeRouteView RouteData="@routeData" DefaultLayout="@typeof(MainLayout)" />
                </Found>
                <NotFound>
                    <LayoutView Layout="@typeof(MainLayout)">
                        <p>Sorry, there's nothing at this address.</p>
                    </LayoutView>
                </NotFound>
            </Router>
        </CascadingValue>
    </CascadingValue>
</CascadingAuthenticationState>